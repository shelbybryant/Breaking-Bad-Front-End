/*
 * this service checks if user login inputs are valid/correct and sets them in session storage
 * methods: 
 *    authenticate() - Authenticate the username and password
 *    isUserLoggedIn() -checks the session storage if user name exists. If it does then return true
 *    logout()- This method clears the session storage of user name
 */

import { Injectable } from '@angular/core';
import { User } from './components/user/user.component';
import { Observable, throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';
import { Router } from '@angular/router';

@Injectable({
  providedIn: 'root'
})
export class AuthenticationService {
  endpoint: string = 'http://localhost:4200/api';
  headers = new HttpHeaders().set('Content-Type', 'application/json');
  currentUser = {};


  constructor(
    private http: HttpClient,
    public router: Router) {}

   /*
   * This method allows the user to access in the app using JSON web token 
   * generated by node server.
   */
   createNewUser(user: User) {
    return this.http.post<any>(`${this.endpoint}/login`, user)
      .subscribe((res: any) => {
        localStorage.setItem('access_token', res.token)
        this.getUserHome(res._id).subscribe((res) => {
          this.currentUser = res;
          this.router.navigate(['login' + res.msg._id]);
        })
        alert("New User registered successfully.")
      })
  }
  /*
  * This method 
  * 1. allows the user to access in the app using JSON web token generated by node server.
  * 2. gets JWT token from the API response and stores in the local storage
  */
  login(user: User) {
      return this.http.post<any>(`${this.endpoint}/login`, user)
        .subscribe((res: any) => {
          localStorage.setItem('access_token', res.token)
          this.getUserHome(res._id).subscribe((res) => {
            this.currentUser = res;
            this.router.navigate(['home/' + res.msg._id]);
          })
        })
    }
    /*
    * This method accesses the token via local storage getItem() method.
    */
    getToken() {
      return localStorage.getItem('access_token');
    }
    /*
    * This method returns true if the user is logged in else returns false.
    */
    get isLoggedIn(): boolean {
      let authToken = localStorage.getItem('access_token');
      return (authToken !== null) ? true : false;
    }

    /*
    * This method removes the token from local storage and logs the user out
    */
    logout() {
      let removeToken = localStorage.removeItem('access_token');
      if (removeToken == null) {
        this.router.navigate(['login']);
      }
    }

  // User profile
  getUserHome(id): Observable<any> {
    let api = `${this.endpoint}/home/${id}`;
    return this.http.get(api, { headers: this.headers }).pipe(
      map((res: Response) => {
        return res || {}
      }),
      catchError(this.handleError)
    )
  }

  // Error 
  handleError(error: HttpErrorResponse) {
    let msg = '';
    if (error.error instanceof ErrorEvent) {
      // client-side error
      msg = error.error.message;
    } else {
      // server-side error
      msg = `Error Code: ${error.status}\nMessage: ${error.message}`;
    }
    return throwError(msg);
  }

}
